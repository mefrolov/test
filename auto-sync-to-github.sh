#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
# –ß–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .syncconfig

echo "üîÑ –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub..."

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f ".syncconfig" ]; then
    echo "üìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ .syncconfig..."
    cat > .syncconfig << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub
# –û–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É

# –í–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç glob –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
INCLUDE:
*.ipynb
*.py
*.sql
analysis/*.csv
docs/*.md
README.md
requirements.txt

# –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)
EXCLUDE:
*private*
*secret*
*password*
*key*
*config*
temp/*
cache/*
.env
*.log
__pycache__/*
.git/*

# –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏ —Ü–µ–ª–∏–∫–æ–º
EXCLUDE_DIRS:
private
secrets
temp
cache
.git
__pycache__
node_modules
EOF
    echo "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .syncconfig - –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã"
    echo "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    exit 0
fi

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
INCLUDE_PATTERNS=()
EXCLUDE_PATTERNS=()
EXCLUDE_DIRS=()

current_section=""
while IFS= read -r line; do
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é
    if [[ "$line" == "INCLUDE:" ]]; then
        current_section="include"
        continue
    elif [[ "$line" == "EXCLUDE:" ]]; then
        current_section="exclude"
        continue
    elif [[ "$line" == "EXCLUDE_DIRS:" ]]; then
        current_section="exclude_dirs"
        continue
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤
    case "$current_section" in
        "include")
            INCLUDE_PATTERNS+=("$line")
            ;;
        "exclude")
            EXCLUDE_PATTERNS+=("$line")
            ;;
        "exclude_dirs")
            EXCLUDE_DIRS+=("$line")
            ;;
    esac
done < .syncconfig

echo "üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
echo "  üìã –í–∫–ª—é—á–∞–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${#INCLUDE_PATTERNS[@]}"
echo "  üö´ –ò—Å–∫–ª—é—á–∞–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${#EXCLUDE_PATTERNS[@]}"
echo "  üìÅ –ò—Å–∫–ª—é—á–∞–µ–º—ã—Ö –ø–∞–ø–æ–∫: ${#EXCLUDE_DIRS[@]}"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
should_exclude() {
    local file="$1"
    local filename=$(basename "$file")
    local filepath="$file"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏
    for exclude_dir in "${EXCLUDE_DIRS[@]}"; do
        if [[ "$filepath" == *"$exclude_dir"* ]]; then
            return 0  # –∏—Å–∫–ª—é—á–∏—Ç—å
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        if [[ "$filepath" == $pattern ]] || [[ "$filename" == $pattern ]]; then
            return 0  # –∏—Å–∫–ª—é—á–∏—Ç—å
        fi
    done
    
    return 1  # –Ω–µ –∏—Å–∫–ª—é—á–∞—Ç—å
}

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
TEMP_DIR="temp_github_sync"
mkdir -p "$TEMP_DIR"

# –ò—â–µ–º –∏ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
file_count=0
for pattern in "${INCLUDE_PATTERNS[@]}"; do
    while IFS= read -r -d '' file; do
        # –£–±–∏—Ä–∞–µ–º ./ –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏
        clean_file="${file#./}"
        
        if should_exclude "$clean_file"; then
            continue
        fi
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –∏ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        target_dir="$TEMP_DIR/$(dirname "$clean_file")"
        mkdir -p "$target_dir"
        cp "$file" "$target_dir/"
        
        echo "  ‚úì $clean_file"
        ((file_count++))
    done < <(find . -path "./.git" -prune -o -name "$pattern" -type f -print0 2>/dev/null)
done

if [ $file_count -eq 0 ]; then
    echo "‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .syncconfig"
    rm -rf "$TEMP_DIR"
    exit 1
fi

echo "üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $file_count"

# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")

# –ö–ª–æ–Ω–∏—Ä—É–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
echo "üì• –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ GitHub..."
git clone $(git remote get-url github) "$TEMP_DIR/github_repo"

cd "$TEMP_DIR/github_repo"

# –û—á–∏—â–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
find . -maxdepth 1 ! -name '.' ! -name '.git' -exec rm -rf {} + 2>/dev/null

# –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
echo "üìã –û–±–Ω–æ–≤–ª—è–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
find .. -maxdepth 10 ! -name 'github_repo' ! -name '.' -exec cp -r {} . \; 2>/dev/null
find . -name 'github_repo' -type d -exec rm -rf {} + 2>/dev/null

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
if git diff --quiet && git diff --staged --quiet; then
    echo "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    cd ../..
    rm -rf "$TEMP_DIR"
    exit 0
fi

# –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º
git add .
git commit -m "üîÑ Selective sync: $LAST_COMMIT_MSG

üìä –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $file_count
‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: .syncconfig
üìÖ $(date '+%Y-%m-%d %H:%M:%S')"

git push origin main

cd ../..
rm -rf "$TEMP_DIR"

echo "‚úÖ –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $file_count —Ñ–∞–π–ª–æ–≤"